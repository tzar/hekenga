#!/usr/bin/env ruby

require "bundler/setup"

if File.exists?(File.expand_path("config/environment.rb"))
  require File.expand_path("config/environment.rb")
end

require "hekenga"
require "thor"
require "pathname"

class HekengaCLI < Thor
  desc "status", "Show which migrations have run and their status."
  def status
    Hekenga.load_all!
    Hekenga.registry.sort_by {|x| x.stamp}.each do |migration|
      status = case Hekenga.status(migration)
               when :running
                 "ACTIVE"
               when :failed
                 "FAILED"
               when :complete
                 "COMPLT"
               when :skipped
                 "SKIPPD"
               else
                 "UN-RUN"
               end
      puts "[#{status}] #{migration.to_key}"
    end
  end

  desc "run_all!", "Run all migrations that have not yet run, in date order."
  def run_all!
    bail_if_errors
    Hekenga.load_all!
    Hekenga.registry.sort_by {|x| x.stamp}.each do |migration|
      if Hekenga.status(migration) == :naught
        migration.perform!
        bail_if_errors
      end
    end
  end

  desc "run! PATH_OR_PKEY --test", "Run a migration (optionally in test mode)."
  option :test, default: false, type: :boolean
  def run!(path_or_pkey)
    bail_if_errors
    migration = load_migration(path_or_pkey)
    migration.test_mode! if options[:test]
    migration.perform!
    if options[:test]
      if Hekenga::Failure.where(pkey: migration.to_key).any?
        puts "Logs have been preserved for debugging. To reset migration state run:"
        puts "  hekenga clear! #{path_or_pkey}"
      else
        puts "Migration test run completed successfully."
        clear!(path_or_pkey)
      end
    end
  end

  desc "cancel", "Cancel all active migrations."
  def cancel
    Hekenga::Log.where(done: false).set(cancel: true)
    puts "Sent :cancel to all active hekenga jobs."
  end

  desc "cleanup", "Remove any failure logs."
  def cleanup
    Hekenga::Failure.all.delete_all
    puts "Removed all failure logs."
  end

  desc "clear! PATH_OR_PKEY", "Clear the logs and failure for a migration. Dangerous!"
  def clear!(path_or_pkey)
    migration = load_migration(path_or_pkey)
    puts "Clearing #{migration.to_key}.."
    Hekenga::Log.where(pkey: migration.to_key).delete_all
    Hekenga::Failure.where(pkey: migration.to_key).delete_all
    puts "Done!"
  end

  desc "rollback", "Rollback a migration."
  def rollback
    todo "rollback"
  end

  desc "recover", "Attempt to resume a failed migration."
  def recover
    todo "recover"
  end

  desc "errors", "Print the errors associated with a failed migration."
  def errors
    todo "errors"
  end

  desc "skip PATH_OR_PKEY", "Skip a migration so that it won't run."
  def skip(path_or_pkey)
    migration = load_migration(path_or_pkey)
    puts "Skipping #{migration.to_key}.."
    migration.tasks.each.with_index do |task, idx|
      log = Hekenga::Log.where(pkey: migration.to_key, task_idx: idx).first ||
        Hekenga::Log.new(migration: migration, task_idx: idx)

      log.done = true
      log.skip = true

      log.save!
    end
    puts "Done!"
  end

  desc "generate <description> --edit", "Generate a migration scaffold (and optionally edit in your editor)."
  option :edit, type: :boolean
  def generate(*description)
    description = description.join(" ")
    scaffold = Hekenga::Scaffold.new(description)
    scaffold.write!
    puts "Done! You can find your migration in:"
    path = Pathname.new(scaffold.to_path).relative_path_from(Pathname.new(Dir.pwd)).to_s
    puts path
    if options[:edit]
      if !ENV["EDITOR"]
        puts "You need to set EDITOR in your ENV to use this feature."
        exit(0)
      end
      exec "$EDITOR #{path}"
    end
  end
  private

  def todo(op)
    puts "#{op.capitalize} has not yet been implemented."
    exit(99)
  end
  def bail_if_errors
    if Hekenga.any_fatal?
      puts "Refusing to run migrations while there is an existing cancelled migration."
      exit(1)
    end
  end
  def load_migration(path_or_pkey)
    if File.exists?(File.expand_path(path_or_pkey))
      require File.expand_path(path_or_pkey)
      migration = Hekenga.registry.last
    else
      Hekenga.load_all!
      unless migration = Hekenga.find_migration(path_or_pkey)
        puts "Can't find migration #{path_or_pkey}. Available migrations:"
        puts Hekenga.registry.map {|x| "- #{x.to_key}"}
        exit(2)
      end
    end
    migration
  end
end

HekengaCLI.start
